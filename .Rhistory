ggplot(area_sev_counts, aes(x = RUR_URBNAME.x, y = INJ_SEVNAME, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(fill = "Count")
area_sev_counts <- df %>%
count(VPICBODYCLASSNAME, INJ_SEVNAME)
area_sev_counts <- df %>%
count(VPICBODYCLASSNAME.x, INJ_SEVNAME)
ggplot(area_sev_counts, aes(x = VPICBODYCLASSNAME.x, y = INJ_SEVNAME, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(fill = "Count")
ggpairs(df)
install.packages(ggpairs)
install.packages("ggpairs")
install.packages("GGally")
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- data.frame(combined_midwest_data_unique)
attach(df)
ggplot(df, aes(x = STATENAME.x, y = TRAV_SP)) + geom_point()
# Plot as bar graph, State and Injury Severity Count
ggplot(df, aes(x = STATENAME.x)) +
geom_bar() +
labs(title = "Bar Graph of State Count", x = "State Names", y = "Count") +
theme_minimal()
ggplot(df, aes(x = INJ_SEVNAME)) +
geom_bar() +
labs(title = "Bar Graph of Injury Severity Count", x = "Injury Severity Name", y = "Count") +
theme_minimal()
ggplot(df, aes(x = WEATHERNAME)) +
geom_bar() +
labs(title = "Bar Graph of Weather Condition Count", x = "Weather Condition", y = "Count") +
theme_minimal()
# Heat Map Visualization
# Weather x Injury Severity
weather_sev_counts <- df %>%
count(WEATHERNAME, INJ_SEVNAME)
ggplot(weather_sev_counts, aes(x = WEATHERNAME, y = INJ_SEVNAME, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(fill = "Count")
ggpairs(df)
ggpairs(df)
ggpairs(df[, -which(names(df) == "COUNTYNAME")])
ggpairs(df, cardinality_threshold = 2000)
ggpairs(df, cardinality_threshold = 2000)
ggpairs(df, cardinality_threshold = 4000)
ggpairs(df, cardinality_threshold = 10000)
dim(df)
df <- read.csv(combined_midwest_data_unique)
df <- read.csv(combined_midwest_data_unique.csv)
install.packages("csv")
install.packages("csvread")
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
# df <- data.frame(combined_midwest_data_unique)
df <- read.csv(combined_midwest_data_unique.csv)
df <- read.csv("combined_midwest_data_unique.csv")
attach(df)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
# df <- data.frame(combined_midwest_data_unique)
df <- read.csv("combined_midwest_data_unique.csv")
attach(df)
dim(df)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
# df <- data.frame(combined_midwest_data_unique)
df <- read.csv("combined_midwest_data_unique.csv")
attach(df)
dim(df)
ggplot(df, aes(x = STATENAME.x, y = TRAV_SP)) + geom_point()
# Plot as bar graph, State and Injury Severity Count
ggplot(df, aes(x = STATENAME.x)) +
geom_bar() +
labs(title = "Bar Graph of State Count", x = "State Names", y = "Count") +
theme_minimal()
ggplot(df, aes(x = INJ_SEVNAME)) +
geom_bar() +
labs(title = "Bar Graph of Injury Severity Count", x = "Injury Severity Name", y = "Count") +
theme_minimal()
ggplot(df, aes(x = WEATHERNAME)) +
geom_bar() +
labs(title = "Bar Graph of Weather Condition Count", x = "Weather Condition", y = "Count") +
theme_minimal()
# Heat Map Visualization
# Weather x Injury Severity
weather_sev_counts <- df %>%
count(WEATHERNAME, INJ_SEVNAME)
ggplot(weather_sev_counts, aes(x = WEATHERNAME, y = INJ_SEVNAME, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(fill = "Count")
ggpairs(df, cardinality_threshold = 6000)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
# df <- data.frame(combined_midwest_data_unique)
df <- read.csv("combined_midwest_data_unique.csv")
attach(df)
dim(df)
print(df)
df <- read.csv("combined_midwest_data_unique.csv")
attach(df)
dim(df)
print(df)
plot(df)
df <- read.csv("combined_midwest_data_unique.csv")
attach(df)
dim(df)
print(df)
plot(df)
df <- read.csv("combined_midwest_data_unique.csv")
attach(df)
dim(df)
print(df)
plot(df)
ggpairs(df)
ggpairs(df, cardinality_threshold = 500)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
# df <- data.frame(combined_midwest_data_unique)
df <- read.csv("combined_midwest_data_unique.csv")
attach(df)
dim(df)
print(df)
plot(df)
ggplot(df, aes(x = STATENAME.x, y = TRAV_SP)) + geom_point()
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- data.frame(combined_midwest_data_unique)
#df <- read.csv("combined_midwest_data_unique.csv")
attach(df)
dim(df)
print(df)
plot(df)
?College
# Load and attach dataframe
library(ISLR)
# Load and attach dataframe
library(ISLR)
?College
# Look at basic summary statistics
summary(df)
# Load and attach dataframe
library(ISLR)
?College
df <- College
attach(df)
# Look at basic summary statistics
summary(df)
# Drop impossible values over 100 for Grad Rate and PhD
df <- df[df$PhD <= 100, ]
df <- df[df$Grad.Rate <= 100, ]
# Show how many observations are in new dataset
dim(df)
library(car)
install.packages("car")
full_model <- lm(Grad.Rate ~ Terminal . Personal, data=df)
full_model <- lm(Grad.Rate ~ Terminal + Personal, data=df)
full_model <- lm(Grad.Rate ~ Terminal + Personal, data=df)
crPlots(full_model)
# Load and attach dataframe
library(ISLR)
library(car)
?College
df <- College
attach(df)
# Look at basic summary statistics
summary(df)
# Drop impossible values over 100 for Grad Rate and PhD
df <- df[df$PhD <= 100, ]
df <- df[df$Grad.Rate <= 100, ]
# Show how many observations are in new dataset
dim(df)
# Build partial regression plots
library(car)
full_model <- lm(Grad.Rate ~ Terminal + Personal, data=df)
crPlots(full_model)
# Build partial regression plots
library(car)
full_model <- lm(Grad.Rate ~ Terminal + Personal, data=df)
crPlots(full_model)
anova(full_model)
# Build partial regression plots
library(car)
model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal, data=df)
crPlots(model)
library(olsrr)
install.packages("olsrr")
# Build partial regression plots
library(car)
model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal, data=df)
crPlots(model)
# Build a model with interaction between S.F.Ratio and Personal
# Perform backwards selection: AIC
library(olsrr)
options(scipen = 20)
int_model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal
, data=df)
AIC_model <- ols_step_backward_aic(int_model,details=TRUE)
print(AIC_model)
install.packages("Metrics")
# Build a model with interaction between S.F.Ratio and Personal
# Perform backwards selection: AIC
library(olsrr)
options(scipen = 20)
int_model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal
, data=df)
AIC_model <- ols_step_backward_aic(int_model,details=TRUE)
print(AIC_model)
# Find and Interpret MAE of the model
library(Metrics)
#Split dataset into 2 sets: train_set and test_set.
train_set <- AIC_model[train,]
# Build a model with interaction between S.F.Ratio and Personal
# Perform backwards selection: AIC
library(olsrr)
options(scipen = 20)
int_model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal
, data=df)
AIC_model <- ols_step_backward_aic(int_model,details=TRUE)
print(AIC_model)
# Find and Interpret MAE of the model
library(Metrics)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(full),nrow(full)*0.50) #Put 50% into training set.
# Build a model with interaction between S.F.Ratio and Personal
# Perform backwards selection: AIC
library(olsrr)
options(scipen = 20)
int_model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal
, data=df)
AIC_model <- ols_step_backward_aic(int_model,details=TRUE)
print(AIC_model)
# Find and Interpret MAE of the model
library(Metrics)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(AIC_model),nrow(AIC_model)*0.50) #Put 50% into training set.
# Load and attach dataframe
library(ISLR)
library(car)
?College
df <- College
attach(df)
# Look at basic summary statistics
summary(df)
# Drop impossible values over 100 for Grad Rate and PhD
df <- df[df$PhD <= 100, ]
df <- df[df$Grad.Rate <= 100, ]
# Show how many observations are in new dataset
dim(df)
# Build partial regression plots
library(car)
model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal, data=df)
crPlots(model)
# Build a model with interaction between S.F.Ratio and Personal
# Perform backwards selection: AIC
library(olsrr)
options(scipen = 20)
int_model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal
, data=df)
AIC_model <- ols_step_backward_aic(int_model,details=TRUE)
print(AIC_model)
# Find and Interpret MAE of the model
library(Metrics)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(AIC_model),nrow(AIC_model)*0.50) #Put 50% into training set.
# Build a model with interaction between S.F.Ratio and Personal
# Perform backwards selection: AIC
library(olsrr)
options(scipen = 20)
int_model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal
, data=df)
AIC_model <- ols_step_backward_aic(int_model,details=TRUE)
print(AIC_model)
# Find and Interpret MAE of the model
library(Metrics)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(int_model),nrow(int_model)*0.50) #Put 50% into training set.
summary(int_model)
(int_model)
print(int_model)
print(int_model)
print(int_model)
dim(int_model)
library(olsrr)
int_model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal
, data=df)
dim(int_model)
AIC_model <- ols_step_backward_aic(int_model,details=TRUE)
print(AIC_model)
dim(int_model)
# Load and attach dataframe
library(ISLR)
library(car)
?College
df <- College
attach(df)
# Look at basic summary statistics
summary(df)
# Drop impossible values over 100 for Grad Rate and PhD
df <- df[df$PhD <= 100, ]
df <- df[df$Grad.Rate <= 100, ]
# Show how many observations are in new dataset
dim(df)
# Build partial regression plots
library(car)
model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal, data=df)
crPlots(model)
# Build a model with interaction between S.F.Ratio and Personal
# Perform backwards selection: AIC
library(olsrr)
int_model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal
, data=df)
dim(int_model)
#AIC_model <- ols_step_backward_aic(int_model,details=TRUE)
#print(AIC_model)
# Find and Interpret MAE of the model
library(Metrics)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(int_model),nrow(int_model)*0.50) #Put 50% into training set.
int_model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal
, data=df)
int_model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=df)
int_model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=df)
dim(int_model)
int_model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=df)
dim(int_model)
dim(df)
dim(model)
dim(model)
# Show how many observations are in new dataset
dim(df)
# Build partial regression plots
library(car)
model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal, data=df)
crPlots(model)
dim(model)
# Show how many observations are in new dataset
dim(df)
# Build partial regression plots
library(car)
model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal, data=df)
crPlots(model)
dim(model)
# Show how many observations are in new dataset
dim(df)
# Build partial regression plots
library(car)
model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal, data=df)
crPlots(model)
dim(model)
# Load and attach dataframe
library(ISLR)
library(car)
?College
df <- College
attach(df)
# Look at basic summary statistics
summary(df)
# Drop impossible values over 100 for Grad Rate and PhD
df <- df[df$PhD <= 100, ]
df <- df[df$Grad.Rate <= 100, ]
# Show how many observations are in new dataset
dim(df)
# Build partial regression plots
library(car)
model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal, data=df)
crPlots(model)
dim(model)
# Build a model with interaction between S.F.Ratio and Personal
# Perform backwards selection: AIC
library(olsrr)
int_model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=df)
AIC_model <- ols_step_backward_aic(int_model,details=TRUE)
print(AIC_model)
# Find and Interpret MAE of the model
library(Metrics)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(df),nrow(df)*0.50) #Put 50% into training set.
test=(-train) #Remaining observations are put into testing set.
train_set <- df[train,]
test_set <- df[test,]
# Find MAE for train_set and test_set
pred_train <- predict(df, train_set)
library(ISLR)
library(car)
library(olsrr)
library(Metrics)
# Load and attach dataframe
?College
df <- College
attach(df)
# Look at basic summary statistics
summary(df)
# Drop impossible values over 100 for Grad Rate and PhD
df <- df[df$PhD <= 100, ]
df <- df[df$Grad.Rate <= 100, ]
# Show how many observations are in new dataset
dim(df)
# Build partial regression plots
model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal, data=df)
crPlots(model)
dim(model)
# Build a model with interaction between S.F.Ratio and Personal
# Perform backwards selection: AIC
int_model <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=df)
AIC_model <- ols_step_backward_aic(int_model,details=TRUE)
print(AIC_model)
# Find and Interpret MAE of the model
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(df),nrow(df)*0.50) #Put 50% into training set.
test=(-train) #Remaining observations are put into testing set.
train_set <- df[train,]
test_set <- df[test,]
# Find MAE for train_set and test_set
pred_train <- predict(df, train_set)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(df),nrow(df)*0.50) #Put 50% into training set.
test=(-train) #Remaining observations are put into testing set.
train_set <- df[train,]
test_set <- df[test,]
df2 <- train_set
model2 <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=df2)
# Find MAE for train_set and test_set
pred_train <- predict(df, train_set)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(df),nrow(df)*0.50) #Put 50% into training set.
test=(-train) #Remaining observations are put into testing set.
train_set <- df[train,]
test_set <- df[test,]
df2 <- train_set
model2 <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=df2)
# Find MAE for train_set and test_set
pred_train <- predict(model2, train_set)
mae(train_set$medv, pred_train)
pred_test <- predict(model2, test_set)
mae(test_set$medv, pred_test)
df2 <- train_set
dim(df2)
model2 <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=train_set)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(df),nrow(df)*0.50) #Put 50% into training set.
test=(-train) #Remaining observations are put into testing set.
train_set <- df[train,]
test_set <- df[test,]
model2 <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=train_set)
# Find MAE for train_set and test_set
pred_train <- predict(model2, train_set)
mae(train_set$medv, pred_train)
pred_test <- predict(model2, test_set)
mae(test_set$medv, pred_test)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(df),nrow(df)*0.50) #Put 50% into training set.
test=(-train) #Remaining observations are put into testing set.
train_set <- df[train,]
test_set <- df[test,]
model2 <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=train_set)
# Find MAE for train_set and test_set
pred_train <- predict(model2, train_set)
mae(train_set$medv, pred_train)
pred_test <- predict(model2, test_set)
mae(test_set$medv, pred_test)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(df),nrow(df)*0.50) #Put 50% into training set.
test=(-train) #Remaining observations are put into testing set.
train_set <- df[train,]
test_set <- df[test,]
model2 <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=train_set)
# Find MAE for train_set and test_set
pred_train <- predict(model2, train_set)
mae(train_set$medv, pred_train)
pred_test <- predict(model2, test_set)
mae(test_set$medv, pred_test)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(df),nrow(df)*0.50) #Put 50% into training set.
test=(-train) #Remaining observations are put into testing set.
train_set <- df[train,]
test_set <- df[test,]
model2 <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=train_set)
# Find MAE for train_set and test_set
pred_train <- predict(model2, train_set)
mae(train_set$medv, pred_train)
pred_test <- predict(model2, test_set)
mae(test_set$medv, pred_test)
# Find MAE for train_set and test_set
pred_train <- predict(model2, train_set)
mae(train_set$Grad.Rate, pred_train)
pred_test <- predict(model2, test_set)
mae(test_set$Grad.Rate, pred_test)
