test_set <- df[test,]
df2 <- train_set
model2 <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=df2)
# Find MAE for train_set and test_set
pred_train <- predict(df, train_set)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(df),nrow(df)*0.50) #Put 50% into training set.
test=(-train) #Remaining observations are put into testing set.
train_set <- df[train,]
test_set <- df[test,]
df2 <- train_set
model2 <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=df2)
# Find MAE for train_set and test_set
pred_train <- predict(model2, train_set)
mae(train_set$medv, pred_train)
pred_test <- predict(model2, test_set)
mae(test_set$medv, pred_test)
df2 <- train_set
dim(df2)
model2 <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=train_set)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(df),nrow(df)*0.50) #Put 50% into training set.
test=(-train) #Remaining observations are put into testing set.
train_set <- df[train,]
test_set <- df[test,]
model2 <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=train_set)
# Find MAE for train_set and test_set
pred_train <- predict(model2, train_set)
mae(train_set$medv, pred_train)
pred_test <- predict(model2, test_set)
mae(test_set$medv, pred_test)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(df),nrow(df)*0.50) #Put 50% into training set.
test=(-train) #Remaining observations are put into testing set.
train_set <- df[train,]
test_set <- df[test,]
model2 <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=train_set)
# Find MAE for train_set and test_set
pred_train <- predict(model2, train_set)
mae(train_set$medv, pred_train)
pred_test <- predict(model2, test_set)
mae(test_set$medv, pred_test)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(df),nrow(df)*0.50) #Put 50% into training set.
test=(-train) #Remaining observations are put into testing set.
train_set <- df[train,]
test_set <- df[test,]
model2 <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=train_set)
# Find MAE for train_set and test_set
pred_train <- predict(model2, train_set)
mae(train_set$medv, pred_train)
pred_test <- predict(model2, test_set)
mae(test_set$medv, pred_test)
#Split dataset into 2 sets: train_set and test_set.
train=sample(1:nrow(df),nrow(df)*0.50) #Put 50% into training set.
test=(-train) #Remaining observations are put into testing set.
train_set <- df[train,]
test_set <- df[test,]
model2 <- lm(Grad.Rate ~ S.F.Ratio + Terminal + Personal + S.F.Ratio*Personal, data=train_set)
# Find MAE for train_set and test_set
pred_train <- predict(model2, train_set)
mae(train_set$medv, pred_train)
pred_test <- predict(model2, test_set)
mae(test_set$medv, pred_test)
# Find MAE for train_set and test_set
pred_train <- predict(model2, train_set)
mae(train_set$Grad.Rate, pred_train)
pred_test <- predict(model2, test_set)
mae(test_set$Grad.Rate, pred_test)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- data.frame(combined_midwest_data_unique)
#df <- read.csv("combined_midwest_data_unique.csv")
attach(df)
dim(df)
print(df)
plot(df)
plot(df)
plot(df$STATE.x)
View(combined_midwest_data_unique)
df <- data.frame(midwest-data-trimmed)
df <- data.frame(midwest-data-trimmed)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- data.frame(midwest-data-trimmed)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- data.frame(midwest-data-trimmed)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- data.frame(midwest-data-trimmed)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- data.frame(midwest-data-trimmed)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- data.frame(midwest-data-trimmed)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- data.frame(midwest-data-trimmed)
df <- data.frame("midwest-data-trimmed")
df <- data.frame("midwest-data-trimmed")
df <- data.frame("midwest-data-trimmed")
df <- data.frame("midwest-data-trimmed")
df <- data.frame("midwest-data-trimmed")
df <- data.frame("midwest-data-trimmed")
attach(df)
dim(df)
print(df)
plot(df)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- data.frame(combined_midwest_data_unique)
#df <- read.csv("combined_midwest_data_unique.csv")
attach(df)
dim(df)
print(df)
plot(df)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- data.frame("midwest-data-trimmed")
#df <- read.csv("combined_midwest_data_unique.csv")
attach(df)
rm(X.midwest.data.trimmed.)
rm(X.midwest.data.trimmed.)
df <- data.frame("midwest-data-trimmed.csv")
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- data.frame("midwest-data-trimmed.csv")
#df <- read.csv("combined_midwest_data_unique.csv")
attach(df)
dim(df)
print(df)
plot(df)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- data.frame("midwest-data-trimmed.csv")
#df <- read.csv("combined_midwest_data_unique.csv")
attach(df)
dim(df)
print(df)
plot(df)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- read.csv("midwest-data-trimmed.csv")
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- read.csv(midwest-data-trimmed.csv)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- read.csv(midwest-data-trimmed.csv)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- read.csv(midwest-data-trimmed)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- read.csv(midwest-data-trimmed)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- read.csv(midwest-data-trimmed)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- read.csv(midwest-data-trimmed)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- read.csv(midwest-data-trimmed)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- read.csv(midwest-data-trimmed)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- read.csv(midwest-data-trimmed)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- read.csv(midwest-data-trimmed)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- read.csv(midwest-data-trimmed)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- read.csv(midwest-data-trimmed)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- read.csv("midwest-data-trimmed.csv")
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- read.csv("midwest-data-trimmed.csv")
attach(df)
dim(df)
print(df)
plot(df)
# Import ggplot2 and dplyr for better visualization of large data sets
library(ggplot2)
library(dplyr)
library(GGally)
# Import and attach data set
df <- read.csv("midwest-data-trimmed.csv")
attach(df)
dim(df)
print(df)
plot(df)
plot(df$FATALS)
plot(df$RUR_URBNAME.x)
plot(df$FATALS)
plot(df$TRAV_SP)
plot(df$AGE)
plot(df$HOUR.x)
plot(df$RUR_URBNAME.x)
plot(df$FATALS)
plot(df$TRAV_SP)
plot(df$AGE)
plot(df$HOUR.x)
ggplot(df, aes(x = RUR_URBAN.x)) +
geom_bar() +
labs(title = "Bar Graph of State Count", x = "State Names", y = "Count") +
theme_minimal()
ggplot(df, aes(x = RUR-URBAN.x)) +
geom_bar() +
labs(title = "Bar Graph of State Count", x = "State Names", y = "Count") +
theme_minimal()
ggplot(df, aes(x = RUR-URBAN)) +
geom_bar() +
labs(title = "Bar Graph of State Count", x = "State Names", y = "Count") +
theme_minimal()
library(readr)
midwest_data_trimmed <- read_csv("midwest-data-trimmed.csv")
View(midwest_data_trimmed)
# Categorical Variable Plots
# Plot as bar graph, State and Injury Severity Count
ggplot(df, aes(x = RUR_URBANNAME.x)) +
geom_bar() +
labs(title = "Bar Graph of State Count", x = "State Names", y = "Count") +
theme_minimal()
# Categorical Variable Plots
# Plot as bar graph, State and Injury Severity Count
ggplot(df, aes(x = RUR_URBNAME.x)) +
geom_bar() +
labs(title = "Bar Graph of State Count", x = "State Names", y = "Count") +
theme_minimal()
# Categorical Variable Plots
# Plot as bar graph, State and Injury Severity Count
ggplot(df, aes(x = RUR_URBNAME.x)) +
geom_bar() +
labs(title = "Bar Graph of Area Classification (Rural/Urban)", x = "State Names", y = "Count") +
theme_minimal()
ggplot(df, aes(x = LGT_CONDNAME)) +
geom_bar() +
labs(title = "Bar Graph of Injury Severity Count", x = "Injury Severity Name", y = "Count") +
theme_minimal()
ggplot(df, aes(x = ROUTENAME)) +
geom_bar() +
labs(title = "Bar Graph of Weather Condition Count", x = "Weather Condition", y = "Count") +
theme_minimal()
ggplot(df, aes(x = LGT_CONDNAME)) +
geom_bar() +
labs(title = "Bar Graph of Lighting Conditions", x = "Injury Severity Name", y = "Count") +
theme_minimal()
ggplot(df, aes(x = ROUTENAME)) +
geom_bar() +
labs(title = "Bar Graph of Road Type", x = "Weather Condition", y = "Count") +
theme_minimal()
ggplot(df, aes(x = RUR_URBNAME.x)) +
geom_bar() +
labs(title = "Bar Graph of Area Classification (Rural/Urban)", x = "State Names", y = "Count") +
theme_minimal()
boxplot(df$FATALS, main="# Fatalities Boxplot", ylab="# Fatalities", col = "lightblue")
boxplot(df$TRAV_SP, main="Travel Speed Boxplot", ylab="Speed (mph)", col="lightblue")
boxplot(df$HOUR.x, main="Hour of Accident", ylab="Hour", col="lightblue")
df <- df %>%
mutate(RouteCategory = case_when(
RouteName %in% c("County Road") ~ "County Road",
RouteName %in% c("Interstate") ~ "Interstate",
RouteName %in% c("Local Street - Frontage Road", "Local Street - Municipality", "Local Street - Township") ~ "Local Street",
RouteName %in% c("State Highway", "US Highway") ~ "Highway",
TRUE ~ "Other"  # Catch-all for "Other" and "Unknown"
))
df <- df %>%
mutate(RouteCategory = case_when(
ROUTENAME %in% c("County Road") ~ "County Road",
ROUTENAME %in% c("Interstate") ~ "Interstate",
ROUTENAME %in% c("Local Street - Frontage Road", "Local Street - Municipality", "Local Street - Township") ~ "Local Street",
ROUTENAME %in% c("State Highway", "US Highway") ~ "Highway",
TRUE ~ "Other"  # Catch-all for "Other" and "Unknown"
))
df <- df %>%
mutate(RouteCategory = case_when(
ROUTENAME %in% c("County Road") ~ "County Road",
ROUTENAME %in% c("Interstate") ~ "Interstate",
ROUTENAME %in% c("Local Street - Frontage Road", "Local Street - Municipality", "Local Street - Township") ~ "Local Street",
ROUTENAME %in% c("State Highway", "US Highway") ~ "Highway",
TRUE ~ "Other"  # Catch-all for "Other" and "Unknown"
))
plot(df$RouteCategory)
df <- df %>%
mutate(RouteCategory = case_when(
ROUTENAME %in% c("County Road") ~ "County Road",
ROUTENAME %in% c("Interstate") ~ "Interstate",
ROUTENAME %in% c("Local Street - Frontage Road", "Local Street - Municipality", "Local Street - Township") ~ "Local Street",
ROUTENAME %in% c("State Highway", "US Highway") ~ "Highway",
TRUE ~ "Other"  # Catch-all for "Other" and "Unknown"
))
plot(df$RouteCategory)
ggplot(df, aes(x = RouteCategory)) +
geom_bar() +
labs(title = "Bar Graph of Road Type", x = "Weather Condition", y = "Count") +
theme_minimal()
df <- df %>%
mutate(LightCond = case_when(
LGT_CONDNAME %in% c("Dark - Lighted") ~ "Dark - Lighted",
LGT_CONDNAME %in% c("Dark - Not Lighted") ~ "Dark - Not Lighted",
LGT_CONDNAME %in% c("Daylight") ~ "Daylight",
LGT_CONDNAME %in% c("Dusk", "Dawn") ~ "Twilight",
TRUE ~ "Other"  # Catch-all for "Other" and "Unknown"
))
ggplot(df, aes(x = LightCond)) +
geom_bar() +
labs(title = "Bar Graph of Lighting Conditions", x = "Injury Severity Name", y = "Count") +
theme_minimal()
df <- df %>%
mutate(AreaClass = case_when(
RUR_URBNAME.x %in% c("Rural") ~ "Rural",
RUR_URBNAME.x %in% c("Urban") ~ "Urban",
TRUE ~ "Other"  # Catch-all for "Other" and "Unknown"
))
ggplot(df, aes(x = AreaClass)) +
geom_bar() +
labs(title = "Bar Graph of Area Classification (Rural/Urban)", x = "State Names", y = "Count") +
theme_minimal()
ggplot(df, aes(x = RouteCategory)) +
geom_bar() +
labs(title = "Bar Graph of Road Type", x = "Road Type", y = "Count") +
theme_minimal()
ggplot(df, aes(x = LightCond)) +
geom_bar() +
labs(title = "Bar Graph of Lighting Conditions", x = "Condition Name", y = "Count") +
theme_minimal()
ggplot(df, aes(x = AreaClass)) +
geom_bar() +
labs(title = "Bar Graph of Area Classification (Rural/Urban)", x = "Classification", y = "Count") +
theme_minimal()
install.packages("performance")
# Correlation Matrices
cor <- correlation(df)
# Heat Maps
# Route x Fatalities
route_fatals_counts <- df %>%
count(RouteCategory, FATALS)
ggplot(route_fatals_counts, aes(x = RouteCategory, y = FATALS, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(fill = "Count")
light_fatals_counts <- df %>%
count(LightCond, FATALS)
ggplot(light_fatals_counts, aes(x = LightCond, y = FATALS, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(fill = "Count")
area_fatals_counts <- df %>%
count(AreaClass, FATALS)
ggplot(area_fatals_counts, aes(x = AreaClass, y = FATALS, fill = n)) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(fill = "Count")
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df[, "FATALS", "TRAV_SP", "AGE", "HOUR"]
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df[, c("FATALS", "TRAV_SP", "AGE", "HOUR")]
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df[, c("FATALS", "TRAV_SP", "AGE", "HOUR")]
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df[c("FATALS", "TRAV_SP", "AGE", "HOUR")]
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df[c("FATALS", "TRAV_SP", "AGE", "HOUR")]
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df["FATALS", "TRAV_SP", "AGE", "HOUR"]
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df["FATALS", "TRAV_SP", "AGE", "HOUR"]
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df["FATALS", "TRAV_SP", "AGE", "HOUR"]
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df["FATALS", "TRAV_SP", "AGE", "HOUR"]
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df["FATALS", "TRAV_SP", "AGE", "HOUR"]
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df["FATALS", "TRAV_SP", "AGE", "HOUR"]
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df[c("FATALS", "TRAV_SP", "AGE", "HOUR")]
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df[c("FATALS", "TRAV_SP", "AGE", "HOUR")]
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df[c("FATALS", "TRAV_SP", "AGE", "HOUR")]
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df[c("FATALS", "TRAV_SP", "AGE", "HOUR")]
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df[c("FATALS", "TRAV_SP", "AGE", "HOUR")]
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df[c("FATALS", "TRAV_SP", "AGE", "HOUR.x")]
cor_matrix_sub <- cor(subset_df)
## SHOW CORRELATION ##
# Correlation Matrix for Continuous
subset_df <- df[c("FATALS", "TRAV_SP", "AGE", "HOUR.x")]
cor_matrix_sub <- cor(subset_df)
print(cor_matrix_sub)
cor_matrix_full <- cor(df)
cor_matrix_full <- cor(df)
library(car)
# Convert categorical variables to factors
df$RUR_URBAN <- factor(df$RUR_URBAN)
## PARTIAL REGRESSION PLOT ##
# Convert categorical variables to factors
df$RouteCategory <- factor(df$RouteCategory)
df$LightCond <- factor(df$LightCond)
df$AreaClass <- factor(df$AreaClass)
model <- lm(FATALS ~ RouteCategory + LightCond + AreaClass + TRAV_SP + AGE + HOUR.x, data = df)
summary(model)
plot(model)
crPlots(model)
